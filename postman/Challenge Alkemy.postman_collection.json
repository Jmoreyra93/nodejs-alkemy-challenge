{
	"info": {
		"_postman_id": "fc83e745-4a85-47c9-927d-969c20d077b7",
		"name": "Challenge Alkemy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19040994"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Get All Users",
					"item": [
						{
							"name": "Get All  - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is not 500\", function () {\r",
											"    pm.response.to.not.have.status(500);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is json\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    console.log(jsonData);\r",
											"    pm.expect(jsonData).to.have.property('data');\r",
											"    pm.expect(jsonData.data).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{basepath}}/users",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "filter[name]",
											"value": "Fernando",
											"disabled": true
										},
										{
											"key": "filter[email]",
											"value": "fervaldes11@gmail.com",
											"disabled": true
										},
										{
											"key": "options[limit]",
											"value": "10",
											"disabled": true
										},
										{
											"key": "options[offset]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "filter[lastName]",
											"value": "Valdes",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All - Without Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is not 500\", function () {\r",
											"    pm.response.to.not.have.status(500);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is json\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{basepath}}/users",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "filter[name]",
											"value": "Fernando",
											"disabled": true
										},
										{
											"key": "filter[email]",
											"value": "fervaldes11@gmail.com",
											"disabled": true
										},
										{
											"key": "options[limit]",
											"value": "10",
											"disabled": true
										},
										{
											"key": "options[offset]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "filter[lastName]",
											"value": "Valdes",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Save User",
					"item": [
						{
							"name": "Save User - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is not 500\", function () {\r",
											"    pm.response.to.not.have.status(500);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is json\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('data');\r",
											"    pm.expect(jsonData.data).to.have.property('email');\r",
											"    pm.expect(jsonData.data.email).to.be.an('string');\r",
											"    pm.expect(jsonData.data).to.have.property('id');\r",
											"    pm.expect(jsonData.data.id).to.be.an('number');\r",
											"\r",
											"    pm.environment.set(\"userId\", jsonData.data.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"randomNumber\", Math.random());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Fernando\",\r\n    \"email\": \"fer@gmail.com\",\r\n    \"password\": \"123456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/users",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Save User - Failure",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is not 500\", function () {\r",
											"    pm.response.to.not.have.status(500);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is json\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"    pm.expect(jsonData.error).to.have.property('detail');\r",
											"    pm.expect(jsonData.error.detail).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"randomNumber\", Math.random());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Fernando3\",\r\n    \"lastName\": \"Valdes\",\r\n    \"email\": \"fervaldes11@gmail.com\",\r\n    \"password\": \"123456\",\r\n    \"birthdate\": \"03/31/1975\",\r\n    \"role\": \"USER_ROLE\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/users",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Register",
					"item": [
						{
							"name": "Register - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is not 500\", function () {\r",
											"    pm.response.to.not.have.status(500);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is json\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('data');\r",
											"    pm.expect(jsonData.data).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"randomNumber\", Math.random());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"fer22@gmail.com\",\r\n    \"password\": \"123456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/auth/register",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register - Failure",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is not 500\", function () {\r",
											"    pm.response.to.not.have.status(500);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is json\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"    pm.expect(jsonData.error).to.have.property('detail');\r",
											"    pm.expect(jsonData.error.detail).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"randomNumber\", Math.random());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"prueba\",\r\n    \"password\": \"123456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/auth/register",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update User",
					"item": [
						{
							"name": "Update User - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is not 500\", function () {\r",
											"    pm.response.to.not.have.status(500);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is json\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('data');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Luis\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/users/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{userId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User - Failure",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is not 500\", function () {\r",
											"    pm.response.to.not.have.status(500);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is json\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"    pm.expect(jsonData.error).to.have.property('detail');\r",
											"    pm.expect(jsonData.error.detail).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Luis\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/users/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "57443558685678"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Login",
					"item": [
						{
							"name": "Login - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is not 500\", function () {\r",
											"    pm.response.to.not.have.status(500);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is json\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('data');\r",
											"    pm.expect(jsonData.data).to.have.property('token');\r",
											"    pm.expect(jsonData.data.token).to.be.an('string');\r",
											"    pm.expect(jsonData.data).to.have.property('user');\r",
											"    pm.expect(jsonData.data).to.have.property('role');\r",
											"\r",
											"    pm.collectionVariables.set(\"token\", jsonData.data.token);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"fer22@gmail.com\",\r\n    \"password\": \"123456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/auth/login",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - Invalid credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is not 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is json\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"notexist@gmail.com\",\r\n    \"password\": \"123456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/auth/login",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login - Invalid request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is not 200\", function () {\r",
											"    pm.response.to.not.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is json\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"    pm.expect(jsonData.error).to.have.property('detail');\r",
											"    pm.expect(jsonData.error.detail).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"NotIsAEmail\",\r\n    \"password\": \"123456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/auth/login",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Characters",
			"item": [
				{
					"name": "Get Character",
					"item": [
						{
							"name": "Get All  - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is not 500\", function () {\r",
											"    pm.response.to.not.have.status(500);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is json\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    console.log(jsonData);\r",
											"    pm.expect(jsonData).to.have.property('data');\r",
											"    pm.expect(jsonData.data).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{basepath}}/characters",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"characters"
									],
									"query": [
										{
											"key": "filter[name]",
											"value": "iro",
											"disabled": true
										},
										{
											"key": "filter[age]",
											"value": "45",
											"disabled": true
										},
										{
											"key": "filter[weigth]",
											"value": "37",
											"disabled": true
										},
										{
											"key": "options[limit]",
											"value": "10",
											"disabled": true
										},
										{
											"key": "options[offset]",
											"value": "0",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All - Without Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is not 500\", function () {\r",
											"    pm.response.to.not.have.status(500);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is json\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{basepath}}/characters",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"characters"
									],
									"query": [
										{
											"key": "filter[name]",
											"value": "Fernando",
											"disabled": true
										},
										{
											"key": "filter[email]",
											"value": "fervaldes11@gmail.com",
											"disabled": true
										},
										{
											"key": "options[limit]",
											"value": "10",
											"disabled": true
										},
										{
											"key": "options[offset]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "filter[lastName]",
											"value": "Valdes",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Character Detail",
					"item": [
						{
							"name": "Get Character Detail  - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is not 500\", function () {\r",
											"    pm.response.to.not.have.status(500);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is json\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    console.log(jsonData);\r",
											"    pm.expect(jsonData).to.have.property('data');\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{basepath}}/characters/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"characters",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "34"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Save Character",
					"item": [
						{
							"name": "Save Character - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is not 500\", function () {\r",
											"    pm.response.to.not.have.status(500);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is json\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('data');\r",
											"    pm.expect(jsonData.data).to.have.property('name');\r",
											"    pm.expect(jsonData.data.name).to.be.an('string');\r",
											"    pm.expect(jsonData.data).to.have.property('id');\r",
											"    pm.expect(jsonData.data.id).to.be.an('number');\r",
											"\r",
											"    pm.environment.set(\"characterId\", jsonData.data.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"randomNumber\", Math.random());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Capitan America\",\r\n    \"age\": 35,\r\n    \"history\": \"Lorem imput\",\r\n    \"weigth\": 80\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/characters",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Save Character - Failure",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is not 500\", function () {\r",
											"    pm.response.to.not.have.status(500);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is json\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"    pm.expect(jsonData.error).to.have.property('detail');\r",
											"    pm.expect(jsonData.error.detail).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"randomNumber\", Math.random());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Ironman\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/characters",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"characters"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Character",
					"item": [
						{
							"name": "Update Character - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is not 500\", function () {\r",
											"    pm.response.to.not.have.status(500);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is json\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('data');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"age\": 45\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/characters/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"characters",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{characterId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Character - Failure",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is not 500\", function () {\r",
											"    pm.response.to.not.have.status(500);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is json\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"    pm.expect(jsonData.error).to.have.property('detail');\r",
											"    pm.expect(jsonData.error.detail).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Luis\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/characters/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"characters",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "57443558685678"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Character",
					"item": [
						{
							"name": "Delete Character - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is not 500\", function () {\r",
											"    pm.response.to.not.have.status(500);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is json\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('data');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{basepath}}/characters/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"characters",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{characterId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Character - Failure",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is not 500\", function () {\r",
											"    pm.response.to.not.have.status(500);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is json\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"    pm.expect(jsonData.error).to.have.property('detail');\r",
											"    pm.expect(jsonData.error.detail).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{basepath}}/characters/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"characters",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "646464654654"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Asociate Movie Copy",
					"item": [
						{
							"name": "Asociate Movie - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is not 500\", function () {\r",
											"    pm.response.to.not.have.status(500);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is json\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('data');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{basepath}}/characters/:idCharacter/movies/:idMovie",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"characters",
										":idCharacter",
										"movies",
										":idMovie"
									],
									"variable": [
										{
											"key": "idCharacter",
											"value": "3"
										},
										{
											"key": "idMovie",
											"value": null
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Movies",
			"item": [
				{
					"name": "Get All Movies",
					"item": [
						{
							"name": "Get All  - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is not 500\", function () {\r",
											"    pm.response.to.not.have.status(500);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is json\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    console.log(jsonData);\r",
											"    pm.expect(jsonData).to.have.property('data');\r",
											"    pm.expect(jsonData.data).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{basepath}}/movies",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"movies"
									],
									"query": [
										{
											"key": "filter[title]",
											"value": "",
											"disabled": true
										},
										{
											"key": "filter[calification]",
											"value": "10",
											"disabled": true
										},
										{
											"key": "filter[creationDate]",
											"value": "",
											"disabled": true
										},
										{
											"key": "options[offset]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "options[limit]",
											"value": "10",
											"disabled": true
										},
										{
											"key": "options[order]",
											"value": "title;DESC",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All - Without Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is not 500\", function () {\r",
											"    pm.response.to.not.have.status(500);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is json\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{basepath}}/movies",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"movies"
									],
									"query": [
										{
											"key": "filter[name]",
											"value": "Fernando",
											"disabled": true
										},
										{
											"key": "filter[email]",
											"value": "fervaldes11@gmail.com",
											"disabled": true
										},
										{
											"key": "options[limit]",
											"value": "10",
											"disabled": true
										},
										{
											"key": "options[offset]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "filter[lastName]",
											"value": "Valdes",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Movies Detail",
					"item": [
						{
							"name": "Get Movies Detail  - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is not 500\", function () {\r",
											"    pm.response.to.not.have.status(500);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is json\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    console.log(jsonData);\r",
											"    pm.expect(jsonData).to.have.property('data');\r",
											"    pm.expect(jsonData.data).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{basepath}}/movies/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"movies",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "34"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Save Movie",
					"item": [
						{
							"name": "Save Movie - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is not 500\", function () {\r",
											"    pm.response.to.not.have.status(500);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is json\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('data');\r",
											"    pm.expect(jsonData.data).to.have.property('name');\r",
											"    pm.expect(jsonData.data).to.have.property('id');\r",
											"    pm.expect(jsonData.data.id).to.be.an('number');\r",
											"\r",
											"    pm.environment.set(\"movieId\", jsonData.data.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"randomNumber\", Math.random());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"The Purge\",\r\n    \"creationDate\": \"2022-01-01\",\r\n    \"calification\": 8,\r\n    \"genderType\": \"TERROR\",\r\n    \"contentType\": \"MOVIE\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/movies",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Save Movie- Failure",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is not 500\", function () {\r",
											"    pm.response.to.not.have.status(500);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is json\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"    pm.expect(jsonData.error).to.have.property('detail');\r",
											"    pm.expect(jsonData.error.detail).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"randomNumber\", Math.random());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"calification\": \"10\",\r\n    \"genderType\": \"ValorNoValido\",\r\n    \"contentType\": \"ValorNoValido\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/movie",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"movie"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Movie",
					"item": [
						{
							"name": "Update Movie - Failure",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is not 500\", function () {\r",
											"    pm.response.to.not.have.status(500);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is json\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"    pm.expect(jsonData.error).to.have.property('detail');\r",
											"    pm.expect(jsonData.error.detail).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Luis\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/movies/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"movies",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "57443558685678"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Movie",
					"item": [
						{
							"name": "Delete Movie - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is not 500\", function () {\r",
											"    pm.response.to.not.have.status(500);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is json\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('data');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{basepath}}/movies/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"movies",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{movieId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Movie - Failure",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is not 500\", function () {\r",
											"    pm.response.to.not.have.status(500);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is json\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('error');\r",
											"    pm.expect(jsonData.error).to.have.property('message');\r",
											"    pm.expect(jsonData.error.message).to.be.an('string');\r",
											"    pm.expect(jsonData.error).to.have.property('detail');\r",
											"    pm.expect(jsonData.error.detail).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{basepath}}/movies/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"movies",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "646464654654"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Asociate Character",
					"item": [
						{
							"name": "Asociate Character - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is not 500\", function () {\r",
											"    pm.response.to.not.have.status(500);\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is json\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response have correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData.status).to.eql('OK');\r",
											"\r",
											"\r",
											"\r",
											"    pm.test(\"Your test name\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{basepath}}/movies/:idMovie/characters/:idCharacter",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"movies",
										":idMovie",
										"characters",
										":idCharacter"
									],
									"variable": [
										{
											"key": "idMovie",
											"value": "34"
										},
										{
											"key": "idCharacter",
											"value": "34"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Images",
			"item": [
				{
					"name": "Upload Character Image- Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is not 500\", function () {\r",
									"    pm.response.to.not.have.status(500);\r",
									"});\r",
									"pm.test(\"Response time is less than 750ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(750);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response have correct properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData.data).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"type": "file",
									"src": "/Z:/BackendEC-ProyectoIntegradorGIT/public/img/productos/notebook_01.jpg"
								},
								{
									"key": "id",
									"value": "4",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{basepath}}/characters/image",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"characters",
								"image"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload Movie Image- Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is not 500\", function () {\r",
									"    pm.response.to.not.have.status(500);\r",
									"});\r",
									"pm.test(\"Response time is less than 750ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(750);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response have correct properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData.data).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"type": "file",
									"src": "/Z:/BackendEC-ProyectoIntegradorGIT/public/img/productos/notebook_01.jpg"
								},
								{
									"key": "id",
									"value": "4",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{basepath}}/characters/image",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"characters",
								"image"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload Character Image- Failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is not 500\", function () {\r",
									"    pm.response.to.not.have.status(500);\r",
									"});\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response have correct properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('error');\r",
									"    pm.expect(jsonData.error).to.have.property('message');\r",
									"    pm.expect(jsonData.error.message).to.be.an('string');\r",
									"    pm.expect(jsonData.error).to.have.property('detail');\r",
									"    pm.expect(jsonData.error.detail).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "id",
									"value": "4",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{basepath}}/characters/image",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"characters",
								"image"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload Movie Image- Failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is not 500\", function () {\r",
									"    pm.response.to.not.have.status(500);\r",
									"});\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response have correct properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('error');\r",
									"    pm.expect(jsonData.error).to.have.property('message');\r",
									"    pm.expect(jsonData.error.message).to.be.an('string');\r",
									"    pm.expect(jsonData.error).to.have.property('detail');\r",
									"    pm.expect(jsonData.error.detail).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "id",
									"value": "4",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{basepath}}/characters/image",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"characters",
								"image"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "randomNumber",
			"value": ""
		},
		{
			"key": "token",
			"value": ""
		}
	]
}